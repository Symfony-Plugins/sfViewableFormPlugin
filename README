# Enhance you forms with `forms.yml`

Your symfony project's forms can be manipulated globally using the `forms.yml`
configuration file. Once this plugin in installed and enabled you can create a
`forms.yml` file that looks something like this:

    # config/forms.yml
    forms:
      sfGuardFormSignin:
        _formatter: mySigninFormFormatter
        _catalogue: signin_form
        username:
          help: Please enter the username you selected during signup.
          messages:
            required: Username is a required field.
            invalid:  Please enter a valid username.
        _post_validator:
          invalid: The username and password you entered were not recognized.
      sfGuardUserForm:
        _formatter: list
      sfGuardUserRegisterForm:
        terms:
          label: I accept the [Terms of Use](@page?name=terms)

    widgets:
      myWidgetFormInputText:
        class: text
      sfWidgetFormInputPassword:
        class: text
      sfWidgetFormInputCheckbox:
        class: checkbox

    validators:
      sfValidatorEmail:
        invalid: '"%value%" is not a valid email address.'

    formatters:
      list:   myWidgetFormSchemaFormatterList
      custom: myWidgetFormSchemaFormatterCustom

    catalogue: forms

The effect of this configuration file is just as it appears. Custom error
messages will be added to the `sfGuardFormSignin` form, the CSS class "text"
will be added to all instances of `sfWidgetFormInput`, and a custom error
message will be added to all instances of `sfValidatorEmail`. The
`sfGuardFormSignin` form will use the `mySigninFormFormatter` formatter and
`sfGuardUserForm` will use the `myWidgetFormSchemaFormatterList` formatter.
All I18N translations will use the `forms` catalogue, except for
`sfGuardFormSignin` which will use the `signin_form` catalogue.

## Model forms

When enhancing a model form (i.e. `sfFormPropel` or `sfFormDoctrine`), the
plugin will parse each value for object constants. For example, the following
configuration will insert the value of `$object->getConfirmer()` into the
`note` field's label.

    # apps/*/config/forms.yml
    forms:
      RelationshipRequestForm:
        note:
          label: Please provide %%confirmer%% a note

## Test your enhanced forms

You can easily test your enhanced forms be creating an instance of
`sfViewableForm` in your test script.

    [php]
    $enhancer = new sfViewableForm();
    $enhancer->loadConfig(sfConfig::get('sf_root_dir').'/config/forms.yml');

    $form = new sfForm();
    $enhancer->enhanceForm($form);

If you are testing a form's validators, bind the form _before_ enhancing it.

    [php]
    $enhancer = new sfViewableForm();
    $enhancer->loadConfig(sfConfig::get('sf_root_dir').'/config/forms.yml');

    $form = new sfForm();
    $form->bind();
    $enhancer->enhanceForm($form);

The `->loadConfig()` method also takes an array of files, if you want to
test a cascading configuration.

    [php]
    $enhancer = new sfViewableForm();
    $enhancer->loadConfig(array(
      sfConfig::get('sf_root_dir').'/config/forms.yml',
      sfConfig::get('sf_root_dir').'/apps/frontend/config/forms.yml',
    ));

    $form = new sfForm();
    $enhancer->enhanceForm($form);
